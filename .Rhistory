knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, error = FALSE)
library(ISLR)
install.packages("ISLR")
library(ISLR)
print(head(College,2))
library(ISLR)
print(head(College,2))
library(kableExtra)
kable(x = College)
College %>% kbl()
haed(College, 5) %>% kbl() %>% kable_classic_2(full_width = F)
head(College, 5) %>% kbl() %>% kable_classic_2(full_width = F)
head(College, 5) %>% kbl() %>% kable_minimal()
kbl(x = head(College, 5)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
kbl(x = head(College, 5)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F)
# Create Vector of Column Max and Min Values
maxs <- apply(College[,2:18], 2, max)
mins <- apply(College[,2:18], 2, min)
# Use scale() and convert the resulting matrix to a data frame
scaled.data <- as.data.frame(scale(College[,2:18],center = mins, scale = maxs - mins))
scaled.data
class(scaled.data)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
ncol(College)
data <- College %>% select_if(is.numeric)
library(dplyr)
data <- College %>% select_if(is.numeric)
dfNorm <- as.data.frame(lapply(data, normalize))
dfNorm
scaled.data
all.equal(scaled.data, dfNorm)
glimpse(scaled.data)
glimpse(dfNorm)
all.equal(scaled.data, dfNorm)
College
head(College)
rownames(dfNorm)
rownames(College)
dfNorm %>% rownames(dfNorm)
dfNorm %>% set_rownames(rownames(College))
library(magrittr)
dfNorm %>% set_rownames(rownames(College))
dfNorm %>% set_rownames(rownames(College)) %>% head(4)
dfNorm %>% set_rownames(rownames(College)) %>% head(3)
dfNorm %>% set_rownames(rownames(College)) %>% head(3)
head(scaled.data, 3)
dfNorm <- as.data.frame(lapply(data, normalize)) %>% set_rownames(rownames(College))
all.equal(scaled.data, dfNorm)
College
College %>% select_if(is.numeric)
College %>% select_if(is.numeric) %>%
lapply(., normalize)
College %>% select_if(is.numeric) %>%
lapply(., normalize) %>% as.data.frame()
College %>% select_if(is.numeric) %>%
lapply(., normalize) %>% as.data.frame() %>%
set_rownames(rownames(College))
scaled.data <- College %>% select_if(is.numeric) %>%
lapply(., normalize) %>% as.data.frame() %>%
set_rownames(rownames(College))
head(scaled.data, 3)
College$Private
as.numeric(College$Private)
# Convert Private column from Yes/No to 1/0
Private = as.numeric(College$Private)-1
Private
scaled.data
data = bind_cols(Private,scaled.data)
data
library(caTools)
set.seed(101)
split = sample.split(data$Private, SplitRatio = 0.70)
data$Private
# Convert Private column from Yes/No to 1/0
Private = as.numeric(College$Private)-1
Private
scaled.data
Private
bind_cols(Private, scaled.data)
data = bind_cols(Private, scaled.data)
data
head(data)
# Convert Private column from Yes/No to 1/0
Private = as.numeric(College$Private)-1
data = cbind(Private, scaled.data)
head(data)
table(data$Private)
set.seed(101)
split = sample.split(data$Private, SplitRatio = 0.70)
split
# Split based off of split Boolean Vector
train = subset(data, split == TRUE)
test = subset(data, split == FALSE)
train
test
feats <- names(scaled.data)
feats
# Concatenate strings
f <- paste(feats,collapse=' + ')
# Concatenate strings
f <- paste(feats,collapse=' + ')
f
f <- paste('Private ~',f)
# Convert to formula
f <- as.formula(f)
f
nn <- neuralnet(f,train,hidden=c(10,10,10),linear.output=FALSE)
library(neuralnet)
install.packages(neuralnet)
install.packages('neuralnet')
library(neuralnet)
nn <- neuralnet(f,train,hidden=c(10,10,10),linear.output=FALSE)
nn
plot(nn)
nn <- neuralnet(formula = f, data = train, hidden=c(3,2,3), linear.output=FALSE)
plot(nn)
library(magrittr)
print(nn)
nn
# Compute Predictions off Test Set
predicted.nn.values <- compute(nn,test[2:18])
# Check out net.result
print(head(predicted.nn.values$net.result))
# Check out net.result
table(predicted.nn.values$net.result)
predicted.nn.values
predicted.nn.values$neurons
predicted.nn.values$net.result
# Check out net.result
print(head(predicted.nn.values$net.result))
# Check out net.result
predicted.nn.values$net.result
predicted.nn.values$net.result <- sapply(predicted.nn.values$net.result,round,digits=0)
table(test$Private,predicted.nn.values$net.result)
nn <- neuralnet(formula = f, data = train, hidden=c(5,5), linear.output=FALSE)
# Compute Predictions off Test Set
predicted.nn.values <- compute(nn, test[2:18])
predicted.nn.values$net.result <- sapply(predicted.nn.values$net.result,round,digits=0)
table(test$Private,predicted.nn.values$net.result)
nn <- neuralnet(formula = f, data = train, hidden=c(5,3,5), linear.output=FALSE)
# Compute Predictions off Test Set
predicted.nn.values <- compute(nn, test[2:18])
predicted.nn.values$net.result <- sapply(predicted.nn.values$net.result,round,digits=0)
table(test$Private,predicted.nn.values$net.result)
plot(nn)
nn <- neuralnet(formula = f, data = train, hidden=c(3,2), linear.output=FALSE)
plot(nn)
plot(nn, rep="best")
library(caret)
test$Private
predicted.nn.values$net.result
class(test$Private)
confusionMatrix(predicted.nn.values$net.result, test$Private)
confusionMatrix(as.factor(predicted.nn.values$net.result), as.factor(test$Private))
confusionMatrix(as.factor(predicted.nn.values$net.result), as.factor(test$Private), positive = "1")
College$Private
as.numeric(College$Private)-1
ifelse(predicted.nn.values$net.result,1,"Yes","No")
ifelse(predicted.nn.values$net.result == 1,"Yes","No")
as.factor(ifelse(predicted.nn.values$net.result == 1,"Yes","No"))
confusionMatrix(as.factor(ifelse(predicted.nn.values$net.result == 1,"Yes","No")),
as.factor(ifelse(test$Private == 1,"Yes","No")))
confusionMatrix(as.factor(ifelse(predicted.nn.values$net.result == 1,"Yes","No")),
as.factor(ifelse(test$Private == 1,"Yes","No")), positive = "Yes")
# Compute Predictions off Test Set
predicted.nn.values <- compute(nn, test[2:18])
# Check out net.result
print(head(predicted.nn.values$net.result))
# Check out net.result
summary(predicted.nn.values$net.result))
# Check out net.result
summary(predicted.nn.values$net.result)
# Check out net.result
print(head(predicted.nn.values$net.result))
predicted.nn.values$net.result <- sapply(predicted.nn.values$net.result,round,digits=0)
confusionMatrix(as.factor(ifelse(predicted.nn.values$net.result == 1,"Yes","No")),
as.factor(ifelse(test$Private == 1,"Yes","No")))
# Compute Predictions off Test Set
predicted.nn.values <- compute(nn, test[2:18])
predicted.nn.values$net.result <- ifelse(predicted.nn.values$net.result > 0.5, 1, 0)
confusionMatrix(as.factor(ifelse(predicted.nn.values$net.result == 1,"Yes","No")),
as.factor(ifelse(test$Private == 1,"Yes","No")))
# Compute Predictions off Test Set
predicted.nn.values <- compute(nn, test[2:18])
predicted.nn.values$net.result <- ifelse(predicted.nn.values$net.result > 0.5, 1, 0)
confusionMatrix(as.factor(ifelse(predicted.nn.values$net.result == 1,"Yes","No")),
as.factor(ifelse(test$Private == 1,"Yes","No")))
names(nn)
nn$act.fct()
nn$act.fct
unlist(nn$weights)  # Obtener en formas de vector los weigths=pesos
nn$call
nn$response
nn$covariate
nn$model.list
nn$err.fct()
nn$err.fct
nn$act.fct()
nn$linear.output
nn$data
nn$exclude
nn$net.result
nn$weights
round(nn$weights, 6)
nn$weights
plot(nn)
nn$weights
unlist(nn$weights)  # Obtener en formas de vector los weigths=pesos
plot(nn)
unlist(nn$weights)  # Obtener en formas de vector los weigths=pesos
min(unlist(nn$weights))
max(unlist(nn$weights))
which.max(unlist(nn$weights))
which.min(unlist(nn$weights))
nn$weights
round(unlist(nn$weights), 7)
round(unlist(nn$weights), 5)
nn$startweights
install.packages(c("matrixStats", "waldo"))
